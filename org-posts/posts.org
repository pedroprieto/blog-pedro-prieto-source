#+hugo_base_dir: ../
#+hugo_section: post

* Homepage
:PROPERTIES:
:EXPORT_TITLE: Página principal - Blog de Pedro Prieto
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_TYPE: homepage
:EXPORT_HUGO_SECTION: /
:CUSTOM_ID: main
:END:

* DONE Acerca de
  CLOSED: [2019-09-23 lun 11:56]
:PROPERTIES:
:EXPORT_TITLE: Acerca de
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_MENU: :menu main
:END:

Mi nombre es Pedro Prieto. Soy profesor del IES Mare Nostrum de Alicante. Este blog tiene como objetivo servir como plataforma para publicar los materiales de mis clases. Espero que poco a poco se convierta en una buena fuente de recursos tanto para los alumnos como para cualquier persona interesada en los temas que aquí se tratan.

* DIW                                                            :@diw:
** Presentación y herramientas de trabajo      :@diw_herramientas_desarrollo:
*** DONE Fundamentos de Git I                                           :git:
    CLOSED: [2019-09-23 lun 11:51]
    :PROPERTIES:
    :EXPORT_FILE_NAME: fundamentos-git-1
    :END:

En este artículo se pretende dar una introducción a los comandos más comunes del software de control de versiones *Git*.
#+hugo: more

**** Videotutoriales
  - [[https://www.youtube.com/watch?v=DuewUoPnAmg&index=2&list=PLQg_Bl-6Gfo9k0KQg5vaaV9r6Hg--nMA7][Sesión 1.1]]
  - [[https://www.youtube.com/watch?v=uwqvuJ5lrIs&list=PLQg_Bl-6Gfo9k0KQg5vaaV9r6Hg--nMA7&index=3][Sesión 1.2]]

**** Índice
      - Breve introducción a Git
      - Entornos: consola y escritorio
      - Instalación
      - Configuración
      - Creación de repositorios
      - Cómo guardar cambios
      - Historial de cambios
      - Cómo deshacer cambios
      - Etiquetado

**** Referencias
  - [[https://git-scm.com/book/es/v2/][Libro de Git]]
  - [[https://github.github.com/training-kit/downloads/es_ES/github-git-cheat-sheet/][Hoja de referencia de Git]]
  - [[https://services.github.com/on-demand/downloads/es_ES/github-git-cheat-sheet.pdf][Hoja de referencia de Git (PDF)]]

**** Contenidos
***** Instalación
   - [[https://git-scm.com/download][https://git-scm.com/download]]

***** Configuración
   #+begin_src bash
   # Opciones obligatorias (nombre y correo)
   git config --global user.name "Nombre y apellido"
   git config --global user.email CORREO@ELECTRONICO

   # Editor de preferencia. Como ejemplos se incluyen el Notepad y el Notepad ++ en Windows
   # Ejecutar sólo una de los tres comandos siguientes
   git config --global core.editor notepad # Notepad de Windows
   git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin" # Notepad ++
   git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin" # Notepad ++ 32 bit

   # Almacenamiento de credenciales para no pedir usuario y contraseña de GitHub cada vez que se suban cambios al servidor
   # Ejecutar sólo uno de los dos comandos siguientes en función del sistema
   git config --global credential.helper cache   # Para Linux
   git config --global credential.helper wincred # Para Windows
   #+end_src

***** Creación de repositorios
   #+begin_src bash
   git init
   #+end_src

***** Ciclo de vida
   [[https://git-scm.com/book/en/v2/images/lifecycle.png]]

***** Revisando el estado
   #+begin_src bash
   git status
   #+end_src

***** Ignorar archivos
   - Archivo ~.gitignore~
   - Plantillas de archivos [[https://github.com/github/gitignore][.gitignore]].

***** Visualizar cambios
   #+begin_src bash
   git diff
   git diff <archivo>
   #+end_src

***** Añadir archivos al área de preparación (stage)
   #+begin_src bash
   git add <archivo> # Añadir archivos individuales
   git add .         # Añadir todos los archivos nuevos o modificados
   #+end_src

***** Visualizar cambios de los archivos en el área de preparación
   #+begin_src bash
   git diff --staged
   git diff --staged <archivo>
   #+end_src

***** Confirmar cambios (commit)
   #+begin_src bash
   git commit -m "MENSAJE"
   #+end_src

***** Historial de cambios
   #+begin_src bash
   git log
   git log --graph
   #+end_src

***** Ver cambios realizados en anteriores commits
   #+begin_src bash
   git show <commit>
   #+end_src

***** Quitar archivo del área de preparación
   #+begin_src bash
   git reset HEAD <archivo>
   #+end_src

***** Eliminar las modificaciones con respecto al último commit
   #+begin_src bash
   # ¡PELIGRO! Todos los cambios que se hayan hecho al archivo desde el último commit se eliminarán
   git checkout -- <archivo>
   #+end_src

***** Etiquetado
   #+begin_src bash
   git tag
   #+end_src

*** DONE Fundamentos de git II                                          :git:
    CLOSED: [2019-09-23 lun 12:18]
    :PROPERTIES:
    :EXPORT_FILE_NAME: fundamentos-git-2
    :END:
Este artículo tiene como objetivo profundizar en el manejo de Git con el uso de *ramas* y *repositorios remotos*.
#+hugo: more

**** Videotutoriales
  - [[https://youtu.be/goMcUY9dZzM][Sesión 2.1]]
  - [[https://youtu.be/1vMheWF6VXo][Sesión 2.2]]
  - [[https://youtu.be/aYDyT85NOLg][Sesión 2.3]]
  - [[https://youtu.be/hBJMwbxb-fc][Sesión 2.4]]

**** Índice
      - Ramas
      - Fusiones de ramas
      - Conflictos
      - Remotos
      - Flujos de trabajo con ramas

**** Referencias
  - [[https://git-scm.com/book/es/v2/][Libro de Git]]
  - [[https://services.github.com/on-demand/downloads/es_ES/github-git-cheat-sheet/][Hoja de referencia de Git]]
  - [[https://services.github.com/on-demand/downloads/es_ES/github-git-cheat-sheet.pdf][Hoja de referencia de Git (PDF)]]
  - [[http://git-school.github.io/visualizing-git/][Herramienta "Visualizing Git"]] (muy interesante para comprender el funcionamiento interno de Git y el trabajo con ramas y remotos)

**** Contenidos
***** Ramas
****** Definición de ramas
   - Una rama es un puntero que apunta a un determinado commit.
   - Un repositorio debe tener una rama como mínimo.
   - El nombre de la rama que se crea por defecto es ~master~. Este nombre no es especial ni tiene una función o significado especial.
   - Existe un puntero especial llamado ~HEAD~ que apunta a la rama en la que estamos en ese momento.
   - Al cambiar de rama se modifica el contenido del directorio de trabajo: éste se muestra tal como estaba en la rama a la que hemos saltado.
   - La creación y el cambio de ramas se realizan de forma instantánea: no tienen apenas coste.
   - El trabajo con ramas es muy interesante por los siguientes motivos:
     - Se pueden hacer pruebas sin modificar el código en producción.
     - Se puede separar el trabajo en tareas o subproyectos que no afecten unos a otros.
     - Cada miembro del equipo puede trabajar sin ser interferido por los demás.

****** Crear ramas
    #+begin_src bash
    git branch <nombre_rama>
    #+end_src

****** Ver ramas disponibles
    #+begin_src bash
    git branch
    #+end_src

****** Cambiar de rama
    #+begin_src bash
    git checkout <nombre_rama>
    #+end_src

****** Fusionar una rama
   - Primero nos posicionamos en la rama sobre la que se va a realizar la fusión
   - Para realizar la fusión ejecutar:


    #+begin_src bash
    git merge <nombre_rama_a_fusionar>
    #+end_src
 
****** Eliminar una rama
    #+begin_src bash
    git branch -d <nombre_rama>
    #+end_src

***** Remotos
****** Clonar un repositorio
    #+begin_src bash
    git clone <URL_REPOSITORIO>
    #+end_src

****** Ver remotos
    #+begin_src bash
    git remote -v
    #+end_src

****** Añadir, eliminar y renombrar remotos
    #+begin_src bash
    git remote add <NOMBRE_REMOTO> <URL_REPOSITORIO>   # Añadir remoto
    git remote rm <NOMBRE_REMOTO>                      # Eliminar remoto
    git remote rename <NOMBRE_ORIGINAL> <NOMBRE_NUEVO> # Renombrar remoto
    #+end_src

****** Traer información del remoto
    #+begin_src bash
    # Este comando NO realiza la fusión en la rama local
    # Si se desean incorporar los cambios habría que realizar un git merge
    git fetch [NOMBRE_REMOTO] # El nombre del remoto por defecto es ORIGIN
    #+end_src

****** Traer y fusionar cambios del remoto
    #+begin_src bash
    git pull [NOMBRE_REMOTO] [NOMBRE_RAMA] # Pull = fetch + merge
    #+end_src

****** Enviar cambios al remoto
    #+begin_src bash
    git push [NOMBRE_REMOTO] [NOMBRE_RAMA]
    #+end_src

****** Enviar los cambios de una rama al remoto y crear una rama remota asociada
    #+begin_src bash
    git push -u NOMBRE_REMOTO NOMBRE_RAMA
    #+end_src
*** DONE GitHub                                                  :git:github:
    CLOSED: [2019-09-23 lun 12:37]
    :PROPERTIES:
    :EXPORT_FILE_NAME: uso-github
    :END:

En este artículo se explicará el uso de la herramienta *GitHub* y las posibilidades que ofrece en el entorno educativo.
#+hugo: more

**** Videotutoriales
  - [[https://youtu.be/SJf4iTkMNPo][Sesión 3.1]]
  - [[https://youtu.be/GMH6hN8FKSU][Sesión 3.2]]
  - [[https://youtu.be/5EJjRqtpqOM][Sesión 3.3]]
  - [[https://youtu.be/A5PKw10PmNU][Sesión 3.4]]

**** Índice
      - Breve descripción y posibilidades en la gestión de tareas del alumnado
      - Alternativas: GitLab, BitBucket,...
      - Cuentas
      - Configuración de la cuenta
      - Manejo básico de la plataforma
      - Repositorios: manejo y ajustes
      - Red social: comentarios, seguidores, etc.
      - Issues y Proyectos
      - Colaboración: Forks y Pull Requests
      - Organizaciones

**** Referencias
  - [[https://help.github.com/][Ayuda de GitHub]]
  - [[https://help.github.com/articles/basic-writing-and-formatting-syntax/][Sintaxis de MarkDown]]
  - [[https://help.github.com/articles/permission-levels-for-a-user-account-repository/#collaborator-access-on-a-repository-owned-by-a-user-account][Permisos de los colaboradores en un repositorio]]
  - [[https://education.github.com/pack][Solicitud de pack de estudiante]]
  - [[https://help.github.com/articles/closing-issues-using-keywords/][Cerrar issues a través de mensajes en el commit]]

**** Contenidos
  - [[https://pedroprieto.github.io/curso-github/presentaciones/sesion-3-presentacion.html][Presentación]]
*** DONE Herramientas de desarrollo               :editores:ide:herramientas:
    CLOSED: [2019-09-24 mar 00:43]
    :PROPERTIES:
    :EXPORT_FILE_NAME: herramientas-desarrollo
    :END:

A continuación se muestran algunas herramientas de desarrollo que considero interesantes. Este artículo estará en continua revisión.
#+hugo: more

**** Editores
   - [[https://code.visualstudio.com/][Visual Studio Code]] 
   - [[https://atom.io/][Atom]]
   - [[http://brackets.io/][Brackets]]
   - [[https://www.sublimetext.com/][Sublime Text]]
   - [[https://notepad-plus-plus.org/][Notepad ++]]
   - [[http://emmet.io/][Emmet (plugin)]]

***** IDEs
   - [[http://www.eclipse.org][Eclipse]]
     - [[http://www.eclipse.org/downloads/packages/eclipse-ide-javascript-web-developers/indigosr2][Paquete para JavaScript]]
   - [[https://netbeans.org][Netbeans]]
     - [[https://netbeans.org/kb/73/ide/javascript-editor.html][Soporte para JavaScript]] 

**** Editores online para prototipos rápidos
   - https://jsbin.com
   - https://jsfiddle.net/
   - http://codepen.io/
   - https://www.jsnippet.net/

**** Herramientas de desarrollo de navegadores
   - [[https://developers.google.com/web/tools/chrome-devtools/][Chrome DevTools]] (Chrome)
   - [[https://developer.mozilla.org/es/docs/Tools][Firefox Dev Tools]] (Firefox)

**** Servicios de validación
   - [[https://validator.w3.org/][W3C HTML Validation Service]]
   - [[https://jigsaw.w3.org/css-validator/][W3C CSS Validation Service]] 
   - [[http://www.jslint.com][JSLint]] (Chequeo de sintaxis y código JavaScript)

**** Git
   - [[https://git-scm.com/download/win][Git para Windows]]

**** Node (plataforma de desarrollo en JavaScript)
   - [[https://nodejs.org/en/][Node JS]]
   - [[https://www.npmjs.com/][Node packages]]
   
**** Diagramas y diseño
   - [[http://plantuml.com][PlantUml]]
   - [[https://draw.io][Draw.io]] 

**** Licencias
   - [[https://en.wikipedia.org/wiki/Copyright][Copyright]]
   - [[https://en.wikipedia.org/wiki/Copyleft][Copyleft]] 
   - [[https://opensource.org/osd.html][Open Source Definition]]
   - [[http://choosealicense.com][Choose a License]]
   - [[https://creativecommons.org/share-your-work/][Creative Commons licenses]] (Para creaciones que no son código, como sitios web, multimedia, textos, libros, etc.)

** Planificación de interfaces web         :@diw_planificacion_interfacesweb:
*** DONE Fundamentos de la planificación de interfaces web :krug:planificacion:usabilidad:
    CLOSED: [2019-09-30 lun 10:28]
    :PROPERTIES:
    :EXPORT_FILE_NAME: planificacion-fundamentos
    :END:

    Antes de proceder a la edición de código e incluso antes de la creación de un prototipo es necesario tener claros algunos *principios de diseño* y tomar algunas decisiones relacionadas con el estilo general del sitio, que normalmente vendrán recogidas en la *[[/post/planificacion-guia-estilo][guía de estilo]]*.
#+hugo: more

En este artículo nos centraremos en analizar algunos de los principios generales de diseño más importantes a tener en cuenta. Para ello se tomará como base el libro "[[http://www.sensible.com/dmmt.html][Don't Make Me Think]]" (/No me hagas pensar/), de Steven Krug.

**** Don't make me think!
   "No me hagas pensar" es el principio más importante que toda página debería seguir en cuanto a usabilidad. El objetivo principal de toda página web debería ser que fuera evidente, auto-explicativa. El usuario debería ser capaz de ver de un vistazo lo que la página propone sin gastar mucho tiempo pensando sobre ello.

   ¿Cómo de evidente? Lo suficiente como para que una persona que no sea experta en el tema propuesto en la página y que apenas sepa usar el navegador sea capaz de llegar al sitio y decir "Ah, esta página va de...".

**** Errores típicos
    - Nombres poco claros, como nombres de marcas, específicos del funcionamiento interno de la empresa o siglas o nombres técnicos.
    - Enlaces y botones que no se muestran de manera obvia y se confunden con texto normal.
    - Asumir que el usuario conoce una información que en realidad desconoce.
    - No saber en qué lugar del sitio web se está ni cómo volver a un sitio conocido (como por ejemplo, la página principal).
    - No ofrecer un punto de entrada claro para empezar a utilizar el sitio.
    - No mostrar los elementos típicos (menús de navegación, etc.) en los sitios habituales.
    - Sobrecargar la página con información de manera que no se sepa qué es importante o qué no.
    - Mezclar el contenido de la página con la publicidad de la misma de manera que sea muy difícil diferenciar ambas cosas.

   El objetivo principal es eliminar todas aquellas preguntas que se pueda hacer el usuario a la hora de utilizar la página.

**** Diseño orientado al escaneo, no a la lectura
    1. Sigue las *convenciones* del diseño web.
       - Los elementos (menús, logo, contenido,...) están dispuestos de manera convencional.
       - Los elementos (cuadros de búsqueda, iconos de vídeo o audio, redes sociales,...) son reconocibles.
    2. Dispone de una *jerarquía* clara.
       - Queda claro qué apartados son más importantes que otros.
       - Los encabezados de distintos niveles son perfectamente distinguibles unos de otros.
       - Las capas agrupan correctamente los contenidos relacionados entre sí.
    3. Las páginas están *divididas en áreas* bien definidas.
    4. Los *enlaces y botones* se distinguen del texto normal.
    5. No hay contenido que *distraiga* al usuario.
       - No hay demasiadas zonas que llamen la atención del usuario de manera evidente (animaciones, exclamaciones, anuncios parpadeando,...).
       - La página muestra un aspecto organizado y es fácil reconocer cada una de las áreas en que está dividida.
    6. El contenido está *estructurado* de manera que sea fácil escanear la página.
       - Hay encabezados que separan las secciones de texto.
       - Queda claro qué encabezado está relacionado con el contenido.
       - Los párrafos son cortos.
       - Se utilizan listas para esquematizar el contenido.
       - La cursiva y la negrita se utilizan pero de manera puntual.
**** Elecciones sencillas
   - Los usuarios buscan elecciones sencillas.
   - Es más recomendable ofrecer pocas opciones  en varios pasos que muchas opciones en pocos pasos.
   - Las opciones que se ofrecen deben ser lo suficientemente distintas como para no dudar entre una u otra.
   - Las instrucciones deben desaparecer o minimizarse al máximo. En caso de aparecer, deben ser:
     - Breves (mínima cantidad de información que sea útil).
     - Oportunas (deben aparecer exclusivamente cuando sean necesarias).
     - Visibles (deben captar la atención del usuario y no pasar desapercibidas).
**** Omisión de palabras inútiles
   - Es conveniente eliminar la mayoría de palabras inútiles en la página.
   - Una vez escrito el texto, es conveniente analizarlo para intentar eliminar la mitad de las palabras.
   - Se debe intentar evitar textos de bienvenida y descripciones al principio de las secciones y en la página principal.
   - Las instrucciones deben escribirse de manera concisa.
**** Diseño de la navegación
***** Tipos de usuarios
     - Orientados a la navegación.
     - Orientados a la búsqueda.
***** Objetivos del menú de navegación
     - Ayudar a encontrar lo que se está buscando.
     - Indicar la localización actual dentro del sitio.
     - Mostrar el contenido del sitio web.
     - Explicar cómo utilizar el sitio.
     - Dar confianza en la calidad del sitio.
***** Convenciones
   - Los menús de navegación deben aparecer en los sitios convencionales.
   - La navegación debe de mostrarse de manera consistente en todas las páginas, con algunas excepciones:
     - Páginas de pago online.
     - Páginas de registro, suscripción, personalización de preferencias,...
   - Es conveniente mostrar el logo de la página que actúe de enlace a la página principal en la parte superior izquierda.
***** Elementos de la navegación
****** Navegación primaria.
   - Muestra las secciones principales del sitio.
****** Utilidades
   - Son herramientas que utilizará el usuario. Ejemplos: cuadro de búsqueda, carrito de compra, "mi cuenta", enlaces para iniciar sesión,...
   - Se deben mostrar las cuatro o cinco más importantes en lugar visible (junto a la navegación primaria, por ejemplo).
   - El resto deben mostrarse en el pie de página.
****** Enlace a la página principal
   - En el logo de la empresa.
   - En la navegación principal.
****** Navegación secundaria y posteriores
   - Se debe prestar atención a todos los niveles de navegación, no solo a los principales.
   - De esta manera se asegura una coherencia a todos los niveles.
***** Búsqueda
   - Es conveniente mostrar un cuadro de búsqueda en las utilidades.
   - El cuadro de búsqueda debe mostrarse de manera convencional (icono de buscar o palabra "Buscar").
   - No deben mostrarse muchas opciones de búsqueda o filtrado en primera instancia. En su lugar, se deben mostrar cuando ya se haya realizado la primera búsqueda con el objeto de ayudar a filtrar los resultados.
***** Nombres de las páginas
   - Se debe mostrar el nombre de cada una de las páginas en la parte superior del contenido.
   - El nombre debe resaltarse de manera adecuada, ya que es el elemento de mayor jerarquía de la página.
   - El nombre debe concordar con el nombre de la opción del menú que ha conducido a dicha página.
***** Localización
   - El menú de navegación debe resaltar la sección o secciones en las que se está en cada momento.
   - El resaltado debe ser evidente.
***** Migas de pan
   - Deben aparecer en la parte superior.
   - Se debe utilizar "*>*" para separar niveles.
   - El último nivel (nombre de la página actual) no debe ser un enlace y debe aparecer destacado.
***** Pestañas
   - Son evidentes y fáciles de usar.
   - Deben estar correctamente configuradas para resaltar la sección actual.
***** Test de navegación
   El diseñador siempre piensa que el usuario va a llegar a la página deseada a través de la página principal y desde allí a través de la navegación. Sin embargo, en multitud de ocasiones se llega a una página directamente a través de un enlace enviado por otra persona o a través de un buscador.
   Por ello, al llegar a una página interior de un sitio web directamente se debería poder contestar a las siguientes preguntas sin demasiada dificultad:
   - ¿Qué sitio es éste? (Nombre del sitio o compañía)
   - ¿En qué página estoy? (Nombre de la página)
   - ¿Cuáles son las secciones principales? (Navegación primaria)
   - ¿Qué opciones tengo en este nivel? (Navegación local)
   - ¿En qué lugar me encuentro dentro de la jerarquía? (Localización)
   - ¿Dónde puedo realizar una búsqueda?
**** Referencias
   - [[http://www.sensible.com/dmmt.html][Don't make me think]], enlace a la web del autor del libro, Steven Krug
   - https://amybughunter.wordpress.com/2014/08/16/book-summary-dont-make-me-think-by-steve-krug/
   - http://www.squeezedbooks.com/articles/dont-make-me-think-a-common-sense-approach-to-web-usability-%282nd-edition%29--summary.html

*** DONE Guias de estilo                          :guia:estilo:planificacion:
    CLOSED: [2019-09-30 lun 10:46]
    :PROPERTIES:
    :EXPORT_FILE_NAME: planificacion-guia-estilo
    :END:

Una guía de estilo recoge las normas de diseño que se utilizarán para crear un sitio web. Normalmente hace referencia a una serie de elementos (tipografía, colores, logos, etc.) que se deben utilizar para garantizar la *uniformidad* de la *estructura* y *apariencia visual* del sitio.
#+hugo: more

**** Logo
El logo es la imagen del sitio web. Es importante diseñarlo adecuadamente para que refleje correctamente la temática y el contenido del sitio web.

Para diseñar un logo se suele recurrir a algún programa de *[[https://es.wikipedia.org/wiki/Gr%C3%A1fico_vectorial][dibujo vectorial]]* como [[https://inkscape.org/es/][Inkscape]]. La principal ventaja de los gráficos vectoriales es que no están formados por píxeles, por lo que no pierden calidad. Una vez creado el gráfico vectorial éste puede ser exportado a diferentes *formatos* (PNG, JPG,...) o *personalizado* (blanco y negro, cambio de colores, versiones con o sin texto,...) para su uso en el sitio web.

[[https://upload.wikimedia.org/wikipedia/commons/7/7e/Oldacmelogo.png][https://upload.wikimedia.org/wikipedia/commons/7/7e/Oldacmelogo.png]]

Algunos recursos para crear un logo:
- https://logomakr.com/
- [[https://inkscape.org/es/][Inkscape]] (software OpenSource equivalente a Adobe Illustrator)
- [[https://youtu.be/zhnAHqQQ9gc][Videotutorial: creación de un logo básico con Inkscape]] 

**** Paleta de colores
A la hora de elegir la paleta de colores es importante definir como mínimo:
- Un color *principal*
- Una *paleta* de colores *complementaria* del color principal
- Un color de fondo

El color principal suele estar presente en el *logo* y todos los aspectos relacionados con la *marca del sitio*. También suele aparecer en los *encabezados* y en los *botones* de formulario que activen la acción principal.

[[https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Nuancier_Pantone_2_%2528Cut_out%2529.jpg/640px-Nuancier_Pantone_2_%2528Cut_out%2529.jpg][https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Nuancier_Pantone_2_%28Cut_out%29.jpg/640px-Nuancier_Pantone_2_%28Cut_out%29.jpg]]

Algunos recursos para generar una paleta de colores:
- https://colordesigner.io/
- https://yeun.github.io/open-color/
- https://coolors.co

**** Tipografía
La tipografía es uno de los elementos más importantes a tener en cuenta. Se deben elegir cuidadosamente los tipos de letra que mejor casen con la temática del sitio y el diseño del logo. Normalmente se utiliza una tipografía principal para encabezados y otra para el resto del texto.

[[https://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Metal_movable_type.jpg/640px-Metal_movable_type.jpg][https://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Metal_movable_type.jpg/640px-Metal_movable_type.jpg]]

Algunos recursos para elegir tipografías:
- https://fonts.google.com/ (Google Fonts ofrece un repositorio de tipografías Open Source para usar libremente en cualquier tipo de proyecto, comercial o no comercial)
- https://www.smashingmagazine.com/2019/07/gorgeous-free-open-source-typefaces/

**** Estructura
La estructura del sitio es otro de los aspectos que puede ser incluido en una guía de estilo. La posición de los elementos de navegación (menús, migas de pan,...), el número de capas que tendrá el sitio (contenido, cabecera, pie,...), donde incluir información de contacto (teléfonos, dirección,...) o dónde incorporar una posible área para anuncios son algunos de los puntos que se pueden detallar. Entraremos más en detalle sobre este tema en otros artículos.

[[https://upload.wikimedia.org/wikipedia/commons/e/e7/Diseno-web-responsive-design.jpg][https://upload.wikimedia.org/wikipedia/commons/e/e7/Diseno-web-responsive-design.jpg]]

**** Elementos gráficos
En este apartado se suele hacer referencia a alguno de estos elementos:
- Iconos
- Imágenes (tamaños, uso en fondos de página, efectos, tipos de edición,...)
- Animaciones
- Patrones de decoración

[[./images/octicons.png]]

Algunos recursos para elegir elementos gráficos:
- https://octicons.github.com/
- https://useiconic.com/open/
- https://material.io/resources/icons/?style=baseline
- https://feathericons.com/

**** Ejemplos de guías de estilo
- [[https://mozilla.design/firefox/][Guía de estilo de Mozilla Firefox]]
- [[https://design.firefox.com/photon/][Photon Design System]] (para diseño de productos basados en Firefox)
- [[http://www.upv.es/entidades/ASIC/manuales/guia_estilos_upv.pdf][Guía de estilos de la UPV]]
- [[https://material.io/design/][Material Design (Google)]]

**** Referencias
- https://marinarodrigo.com/como-y-por-que-crear-una-guia-de-estilo-para-tu-web/
- https://www.toptal.com/designers/ui/ui-styleguide-better-ux

*** DONE Diseño de prototipos     :prototipos:diseño:moqups:wireframe:mockup:
    CLOSED: [2019-10-07 lun 11:01]
    :PROPERTIES:
    :EXPORT_FILE_NAME: diseno-prototipos
    :END:

  En todo proyecto de desarrollo web es recomendable realizar un prototipo o boceto del interfaz. De esta manera se puede tener una idea aproximada del aspecto visual que tendrá, qué secciones lo compondrán, cómo se verá en pantalla, etc. 
  #+hugo: more

  El principal objetivo es generar un boceto de manera rápida, sin necesidad de utilizar código. Estos bocetos permiten acordar las características del interfaz web con el cliente o con el resto de miembros del equipo de desarrollo.

  Como paso previo a la creación de un prototipo es necesario [[/post/planificacion-fundamentos][haber planificado adecuadamente la interfaz]] y haber acordado las [[/post/planificacion-guia-estilo][normas de diseño y el aspecto visual]] del sitio.

  Existen varias posibilidades para crear prototipos:
  - *Papel* - Es la opción más rápida y sencilla.
  - *Digital* - Hace uso de algún programa de edición sencillo. Puede ofrecer algo de funcionalidad (interacción con enlaces, por ejemplo).
  - *Nativo* - Está implementado haciendo uso de las tecnologías reales de la aplicación. Normalmente se utiliza como último paso antes del lanzamiento del producto.

**** Prototipos en papel
   #+CAPTION: Prototipo de papel. Fuente: Wikimedia
   https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Paper_prototype_of_website_user_interface%2C_2015-04-16.jpg/640px-Paper_prototype_of_website_user_interface%2C_2015-04-16.jpg

   Los prototipos en papel ofrecen una primera aproximación al diseño de la interfaz. Pueden realizarse tan sencillos como se desee (en blanco y negro, en la típica servilleta de bar que se pone como ejemplo de germen de todas las grandes ideas,...) o con un nivel de complejidad más elevado (utilizando distintos tipos de papeles, colores, materiales,...).

   La principal ventaja de este tipo de prototipos es que no necesitan de ningún tipo de conocimiento técnico. Por lo tanto, se suelen utilizar como una primera aproximación para el diseño de la interfaz.

   Una vez creados en papel los bocetos de las distintas páginas que componen el sitio se pueden tomar *fotografías* para simular determinadas interacciones y estados de la aplicación. Esas imágenes pueden utilizarse a su vez para crear *animaciones* y distribuir el prototipo de manera más eficiente sin la necesidad de tener que cargar con el papel de un lado a otro.

   En el siguiente enlace se puede consultar un vídeo sobre cómo Google utiliza este tipo de prototipos: [[https://www.youtube.com/watch?v=JMjozqJS44M][Rapid Prototyping 1 of 3: Sketching & Paper Prototyping]].

**** Prototipos digitales
   #+CAPTION: Prototipo digital
   [[./images/prototipo.png]]

   Para la creación de estos prototipos se hace uso de alguna herramienta específica de edición. El objetivo es crear un boceto *más parecido a la realidad* que incluso pueda ofrecer un mínimo nivel de *interactividad*. El diseño puede ser exportado a un *archivo de imagen*, *HTML* o *PDF* para adjuntar a la documentación del proyecto.

   En el siguiente enlace se puede consultar un vídeo sobre cómo Google utiliza este tipo de prototipos: [[https://www.youtube.com/watch?v=KWGBGTGryFk&t=246s][Rapid Prototyping 2 of 3: Digital Prototyping]].

**** Prototipos nativos
   #+CAPTION: Prototipo nativo
   https://upload.wikimedia.org/wikipedia/commons/e/e2/Responsive_Web_Design.png

   Los prototipos nativos utilizan las *mismas tecnologías* (lenguajes de programación, librerías,...) y *dispositivos* (teléfonos móviles, pantallas,...) que utilizará la *aplicación real*. Se utilizan por tanto como *último paso* antes del desarrollo de la aplicación real. Una vez el prototipo ha sido correctamente testado en los dispositivos en los que se va a utilizar puede integrarse en la aplicación junto con el resto de componentes (lógica de negocio y almacenamiento de datos).

   En el siguiente enlace se puede consultar un vídeo sobre cómo Google utiliza este tipo de prototipos: [[https://www.youtube.com/watch?v=lusOgox4xMI][Rapid Prototyping 3 of 3: Native Prototyping]].

**** Diseño web adaptable - Mobile First
      La tendencia actual consiste en diseñar siguiendo la teoría de *Mobile First*, o *Móvil primero*. Esta teoría aboga por realizar el diseño pensando en dispositivos móviles y a continuación añadir o modificar características para adaptar el diseño a otro tipo de dispositivos con pantallas más grandes.

   La elección de este patrón de diseño se debe a que *[[https://developers.google.com/search/mobile-sites/mobile-first-indexing][los buscadores dan más peso a los sitios web optimizados para dispositivos móviles]]* dado que la mayoría de usuarios que se conectan a Internet lo hacen mediante este tipo de dispositivos.

   Una vez creado el diseño para móvil se procede a crear las versiones para pantallas más grandes. De esta manera el sitio web *se adapta a distintos tipos de pantallas* siguiendo el [[https://es.wikipedia.org/wiki/Dise%C3%B1o_web_adaptable][patrón de diseño web adaptativo]].

**** Herramientas de creación de prototipos digitales
   Existe un gran número de herramientas para creación de prototipos. Muchas de ellas son de pago, aunque hay alternativas gratuitas con una funcionalidad algo más reducida pero que puede ser suficiente para realizar un boceto rápido. Algunas de ellas se enumeran a continuación:

   - [[https://www.figma.com/][Figma]] - Herramienta online. Comercial. Gratuita para 3 proyectos.
   - [[http://pencil.evolus.vn/][Pencil]] - Programa de escritorio. Open Source.
   - [[https://wireframe.cc/][wireframe.cc]] - Herramienta online. Comercial. Ofrece demo gratuita.
   - [[https://moqups.com/][Moqups]] - Herramienta online. Comercial. Ofrece cuentas gratuitas a estudiantes y proyectos Open Source.
   - [[http://principleformac.com/][Principle]] - Herramienta para Mac. Comercial.
   - [[https://proto.io/][proto.io]] - Herramienta online. Comercial.
   - [[https://marvelapp.com/][Marvel]] - Herramienta online. Comercial. Ofrece un plan gratuito para un proyecto.
   - [[https://www.invisionapp.com/][InVision]] - Herramienta online. Comercial. Ofrece un plan gratuito para un proyecto.
   - [[https://mockup.io/][mockup.io]] - Herramienta online. Comercial.
   - [[https://ninjamock.com/][Ninja Mock]] - Herramienta online. Comercial.
   - [[https://balsamiq.com][Balsamiq]] - Herramienta de escritorio y online. Comercial.

**** Otros recursos
   A continuación se enumeran algunos enlaces que pueden ser de utilidad en la creación de prototipos:

   - [[https://es.lipsum.com/][Lorem Ipsum]] - Generador de textos de relleno.
   - [[https://www.smashingmagazine.com/][Smashing Magazine]] - Sitio web relacionado con el desarrollo y diseño web.
   - [[http://www.webyurt.com/][Web Yurt]] - Sitio web relacionado con el desarrollo y diseño web.
   - [[https://www.creativebloq.com][Creative Bloq]] - Sitio web dedicado al arte y diseño gráfico.

*** DONE Pautas de accesibilidad        :accesibilidad:accesibility:wai:aria:
    CLOSED: [2019-10-14 lun 14:36]
    :PROPERTIES:
    :EXPORT_FILE_NAME: accesibilidad
    :END:

   La accesibilidad web es una práctica inclusiva que tiene como objetivo que *no haya ninguna barrera que impida o limite el uso y acceso a Internet* a personas con cualquier tipo de discapacidad.
#+hugo: more

**** Accesibilidad web
   #+CAPTION: Accesibilidad web. Fuente: Wikimedia
https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Preferences-desktop-assistive-technology.svg/200px-Preferences-desktop-assistive-technology.svg.png

     Muchas de las personas que tienen algún tipo de discapacidad, tanto de tipo físico como de tipo intelectual, necesitan utilizar dispositivos especiales para acceder a los contenidos de Internet. Otras necesitan acceder a la información de manera adaptada, con contenidos simplificados para poder comprenderlos mejor. El organismo [[https://www.w3.org/WAI/design-develop/es][W3C]] desarrolla estándares web denominados /Recomendaciones/ relacionados con esta área.

**** WCAG
      /Web Content Accessibility Guidelines/ (WCAG) es un conjunto de recomendaciones desarrolladas por el organismo [[https://www.w3.org/WAI/design-develop/es][W3C]] cuyo objetivo es mejorar la accesibilidad de los contenidos web. WCAG define [[https://es.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines#Principios][12 directrices agrupadas en 4 principios]]. Para cada directriz se definen tres niveles de cumplimiento: A, AA y AAA.

   - [[https://www.w3.org/WAI/standards-guidelines/wcag/es][Introducción a las Pautas de Accesibilidad para el contenido web (WCAG)]]
   - [[https://www.w3.org/WAI/standards-guidelines/wcag/glance/es][WCAG 2.1 de un vistazo]]

***** Validación
   Existen varias herramientas de validación de las reglas WCAG. La mayoría de ellos no es capaz de analizar todas las recomendaciones y simplemente hacen sugerencias sobre apartados que podrían estar mal diseñados. En este [[https://www.usableyaccesible.com/recurso_misvalidadores.php][enlace]] se comentan algunas de ellas. Uno de los más sencillos de usar es http://wave.webaim.org/.

**** Principales recomendaciones
   Las recomendaciones de la WCAG son bastante amplias, por lo que a no ser que se sea un experto en la materia pueden parecer difíciles de seguir. Por ello citaremos a continuación unas recomendaciones sencillas y fáciles de llevar a la práctica.

***** Corregir problemas de usabilidad
   El hecho de que un sitio sea más usable para el público general tiene como consecuencia que también será más efectivo para las personas con discapacidad.

***** Informarse sobre las tecnologías de accesibilidad
   Es recomendable informarse sobre cómo utilizan las tecnologías las personas con algún tipo de discapacidad. La mejor manera para ello es verlos en persona, pero la mayoría de nosotros no tiene esa posibilidad. A continuación se muestran algunos sitios con recursos sobre el tema:

   - [[http://www.lecturafacil.net/content-management-es/][Asociación de lectura fácil]]
   - [[http://webaim.org/intro/][Web Accesibility in Mind]]

***** Implementar cambios en las páginas web
   A continuación se enumeran los puntos más importantes para mejorar la accesibilidad de un sitio web.

   - Añadir un *atributo* ~alt~ con información adecuada a *cada imagen* del sitio. La descripción debe ser breve y concisa, evitando repetir las mismas palabras en todas las descripciones.
   - Utilizar correctamente los *encabezados*. Los encabezados ~<h1>~ deben utilizarse para el título de la página o título principal del contenido; los ~<h2>~ para las secciones; los ~<h3>~ para las subsecciones, etc. Así se facilita la navegación a través del teclado.
   - Utilizar etiquetas ~<label>~ para los campos de los *formularios*. De esta manera se asocian las etiquetas con los campos y los lectores de pantalla pueden interpretarlos correctamente.
   - Añadir un *enlace* del tipo /Ir al contenido principal/ al principio de cada página. Así se evita tener que esperar tiempo escuchando las entradas del menú de navegación cada vez que se carga una página nueva.
   - Hacer que haya un nivel de *contraste* adecuado entre el texto y el fondo.
   - Utilizar *plantillas accesibles* si se utiliza un gestor de contenido.
   - Utilizar las especificaciones [[https://www.w3.org/WAI/standards-guidelines/aria/][WAI-ARIA]].

En los siguientes enlaces se ofrece una información más detallada sobre *consejos de diseño y desarrollo*:

   - [[https://www.w3.org/WAI/design-develop/es][Introducción al diseño y al desarrollo]]
     - [[https://www.w3.org/WAI/tips/writing/][Consejos para creadores de contenidos]]
     - [[https://www.w3.org/WAI/tips/designing/][Consejos para diseñadores web]]
     - [[https://www.w3.org/WAI/tips/developing/][Consejos para desarrolladores web]]

**** WAI-ARIA
   WAI-ARIA es una documento técnico publicado por el [[https://www.w3.org/WAI/design-develop/es][W3C]] que especifica cómo *mejorar la accesibilidad de páginas web*. Presta especial atención a los siguientes aspectos:

   - *Contenido dinámico* generado a partir de *AJAX*. La mayoría de las páginas utilizan AJAX para realizar peticiones al servidor sin necesidad de recargar la página. Por ello, el contenido de determinadas áreas de la página puede cambiar y la persona que lo está utilizando puede no darse cuenta. ARIA establece algunas estrategias a implementar para que los cambios en la página sean notificados al usuario cuando se produzcan.
   - *Componentes de interfaz de usuario* tales como pestañas, acordeones, migas de pan,... Estos componentes normalmente se implementan utilizando etiquetas HTML genéricas (por ejemplo, etiquetas ~DIV~) sin ningún tipo de significado semántico. ARIA ofrece algunas técnicas para *anotar* las etiquetas correspondientes y añadirles información sobre su uso y/o propósito.

   A continuación se muestran algunos recursos sobre las tecnologías WAI-ARIA:

   - [[https://www.w3.org/WAI/standards-guidelines/aria/][Sitio web WAI-ARIA]]
   - [[https://www.w3.org/TR/wai-aria-practices/][Técnicas ARIA para desarrolladores]]

** Estilos y multimedia                         :@diw_estilos_multimedia:css:
*** DONE Conceptos básicos de CSS
    CLOSED: [2019-10-21 lun 11:28]
    :PROPERTIES:
    :EXPORT_FILE_NAME: conceptos-basicos-css
    :END:

Este artículo tiene como objetivo ofrecer una introducción sobre *CSS*, explicar los tipos de hojas de estilo, el modelo de cascada y herencia, comprobar qué características están disponibles en los distintos navegadores y proporcionar una serie de recursos donde encontrar información más detallada. 
#+hugo: more

**** Introducción
   Las hojas de estilo en cascada *CSS* - /Cascade Style Sheet/ en inglés - se utilizan para *diseñar y dar formato* a las páginas web escritas con HTML. Las razones de su aparición son las siguientes:

   - *HTML* ofrece muy *pocas opciones* para dar formato al texto. Su función es estructurar el texto en secciones tales como tablas, listas, párrafos, etc., pero en cuanto a diseño visual resulta un tanto pobre.
   - El diseñador de páginas web se encontraba con archivos HTML extremadamente *liosos*, ya que en el mismo texto se agrupaban contenidos, estructuras e instrucciones de formato visual, por lo que su modificación y elaboración resultaba ser muy complicada.
   - La *modificación* del formato utilizado en un sitio web compuesto por un gran número de páginas resultaba *muy difícil*, ya que se tenían que cambiar manualmente los estilos de cada una de las páginas que formaban el sitio. 

   Frente a esta situación, el organismo W3C decidió crear un sistema por el que las *instrucciones de formato* se encontraran *separadas* de los otros elementos. Así, a partir de la versión 4 de HTML se desaconseja utilizar elementos de formato y se sugiere la utilización de las hojas de estilo en cascada o CSS.

   Un ejemplo de las posibilidades que ofrecen las hojas de estilo se puede encontrar visitando la página [[http://www.csszengarden.com/][Zengarden]], donde se puede observar el efecto que produce en la misma página HTML utilizar una hoja de estilo u otra.

**** Estructura modular
La versión actual de CSS es *CSS 3*. Esta especificación se ha dividido en una serie de [[https://en.wikipedia.org/wiki/Cascading_Style_Sheets#CSS_3][módulos]] que son desarrollados por separado. Cada uno de dichos módulos hace referencia a una serie de funcionalidades (color, modelo de caja, fuentes, bordes, /layout/, /media queries/, selectores,...).

**** Tipos de hojas de estilo
   Una hoja de estilos contiene datos de formato relativos a los elementos definidos en la página HTML. Por lo tanto, ambos (documento HTML y hoja de estilo) deben estar relacionados de alguna manera. Existen tres maneras de utilizar hojas de estilo:

   - *Aplicar estilos directamente a elementos HTML*. De esta manera se escribe el código CSS dentro del atributo style de la etiqueta HTML en cuestión.Por ejemplo, para aplicar un estilo css a un párrafo:

   #+BEGIN_SRC html
       <p style="código_css">HOLA</p>
   #+END_SRC
  
   - *Hojas de estilos internas*. Se utilizan para aplicar estilos a la página en la cual se utiliza. El código de la hoja de estilo se ubicará en la cabecera de la página web, entre las etiquetas siguientes:

   #+BEGIN_SRC html
     <style type="text/css">
             <!--  Código_css  -->
     </style>
   #+END_SRC

   - *Hojas de estilos externas*. Se utilizan para aplicar el mismo formato a varias páginas de un portal. Se definen en un archivo externo que será consultado por todas las páginas HTML del sitio web, reutilizando por tanto el código. Para ello se escribirá el código CSS en un documento externo con extensión css. Posteriormente se vinculará a la página web mediante la utilización de la siguiente *etiqueta* en la *cabecera* del documento HTML en cuestión:

   #+BEGIN_SRC html
     <link rel="stylesheet" type="text/css" href="nombre_archivo_css.css">
   #+END_SRC

**** Cascada y herencia
   CSS permite definir estilos en varios sitios, tal como hemos visto en el punto anterior. Además, es posible que un elemento reciba estilos de varios orígenes distintos. Algunos ejemplos de ello son:

   - Un elemento tiene asignado un nombre de clase y un identificador. En la hoja de estilos se definen estilos para dicho identificador y dicho nombre de clase.
   - Un elemento hereda el valor de una propiedad definida en alguno de los elementos que lo contienen.
   - Un elemento recibe un estilo de una hoja externa, de una hoja interna y de un estilo aplicado directamente en la etiqueta.

   En casos como los descritos, ¿cómo se resuelven los conflictos si se definen valores distintos para la misma propiedad? ¿Son más importantes los estilos definidos para nombres de clase? ¿Los definidos en hojas internas?

   La regla general es la siguiente: *los estilos aplicados a selectores más concretos tienen mayor peso que los aplicados a selectores más generales*. En caso de empate, el *último* estilo que se aplica es el que prevalece (las hojas de estilo externas se considera que se cargan antes que las hojas de estilo internas).

   En concreto, el procedimiento que se aplica es el siguiente (fuente: https://www.w3.org/TR/CSS22/cascade.html#cascade):

   - Se cuenta 1 si la declaración está incluida en un atributo ~style~; si no, se cuenta 0. (Peso "*a*", mayor importancia).
   - Se cuenta el número de identificadores (ID) que aparezcan en el selector. (Peso "*b*").
   - Se cuenta el número de atributos (distintos al ID) , clases y pseudo-clases en el selector. (Peso "*c*").
   - Se cuenta el número de nombres de elementos y pseudo-elementos en el selector. (Peso "*d*", menor importancia).

   Para determinar qué estilo se aplica en caso de conflicto se mira el resultado: el número más alto en la casilla de mayor peso es el que se aplica; en caso de empate, se comprueban los números de los pesos más bajos sucesivamente.

   #+BEGIN_SRC html
    *             {}  /* a=0 b=0 c=0 d=0 -> especificidad = 0,0,0,0 */
    li            {}  /* a=0 b=0 c=0 d=1 -> especificidad = 0,0,0,1 */
    li:first-line {}  /* a=0 b=0 c=0 d=2 -> especificidad = 0,0,0,2 */
    ul li         {}  /* a=0 b=0 c=0 d=2 -> especificidad = 0,0,0,2 */
    ul ol+li      {}  /* a=0 b=0 c=0 d=3 -> especificidad = 0,0,0,3 */
    h1 + *[rel=up]{}  /* a=0 b=0 c=1 d=1 -> especificidad = 0,0,1,1 */
    ul ol li.red  {}  /* a=0 b=0 c=1 d=3 -> especificidad = 0,0,1,3 */
    li.red.level  {}  /* a=0 b=0 c=2 d=1 -> especificidad = 0,0,2,1 */
    #x34y         {}  /* a=0 b=1 c=0 d=0 -> especificidad = 0,1,0,0 */
    style=""          /* a=1 b=0 c=0 d=0 -> especificidad = 1,0,0,0 . 
                         Éste último es el que se aplica.*/

   <head>
     <style type="text/css">
       #x97z { color: red }
     </style>
     </head>
   <body>
     <p id="x97z" style="color: green">
   </body>
   #+END_SRC

   En el ejemplo, el párrafo tendrá color verde, ya que el valor de su peso "a" es 1. Como el peso "a" es el más importante, es el que se impone a los demás.

***** !important
Existe una manera de sobreescribir estilos CSS sin importar las reglas de especificidad: añadiendo ~!important~ a la regla correspondiente:

#+begin_src css
p {
    color: red !important;
}
#parrafo1 {
    color: green;
}
#+end_src

#+begin_src html
<p id="parrafo1">Será ROJO a pesar de que la regla es menos específica</p>
#+end_src

**** Hojas de estilo alternativas
   Es posible incluir más de una hoja de estilo en un sitio web y ofrecer al usuario la posibilidad de usar una u otra mediante el uso de *hojas de estilo alternativas*.

   Algunos navegadores (como Firefox) permiten seleccionar la hoja de estilos a través de sus menús (en Firefox, menú /Ver/ / /Estilo de página/).

   Para incluir hojas de estilo alternativas se debe utilizar la etiqueta ~<link rel="alternate stylesheet">~. A continuación se muestra un ejemplo:

   #+BEGIN_SRC html
     <link rel="stylesheet" 
           title="Estilo principal"
           href="./css/estilos.css">

     <link rel="alternate stylesheet"
           title="Estilo alternativo 1"
           href="./css/estilos1.css">

     <link rel="alternate stylesheet"
           title="Estilo alternativo 2"
           href="./css/estilos2.css">
   #+END_SRC

**** Compatibilidad entre navegadores
En ocasiones es difícil saber si una determinada propiedad CSS, sobre todo las más recientes, es compatible con una determinada versión de navegador. Para ello son muy útiles los siguientes enlaces:

   - [[http://caniuse.com/][Can I Use? (¿Puedo utilizar...?)]]
   - [[http://www.w3schools.com/cssref/css3_browsersupport.asp][Tabla de compatibilidad de propiedades CSS con los principales navegadores]]

**** Recomendaciones de diseño con CSS
En el diseño de interfaces es recomendable definir *clases de estilos* para aplicar a determinadas secciones, elementos destacados, etc. De esta manera se conseguirá un código altamente *modular* que permitirá realizar cambios tanto de apariencia como de estructura con relativa facilidad.

Por tanto, se intentará *priorizar el uso de clases* por encima del uso de selectores basados en nombres o agrupaciones de elementos. En [[/post/estrategias_diseno_css/][este artículo]] se intenta entrar más en detalle sobre el tema.

**** Enlaces de referencia de CSS
   - [[https://developer.mozilla.org/es/docs/Learn/CSS][Curso de CSS de Mozilla]] - Excelente curso de CSS de la Fundación Mozilla
   - [[https://desarrolloweb.com/home/css][Cursos de CSS en desarrolloweb.com]] - Cursos completos de CSS
   - [[https://www.w3schools.com/css/default.asp][Tutorial CSS en W3Schools]] - Tutorial completo sobre CSS
   - [[http://w3schools.com/howto/][W3Schools howtos]] - Recetas para crear componentes en CSS
   - [[https://css-tricks.com][CSS Tricks]] - Sitio web con infinidad de recursos
   - [[https://www.cssscript.com][CSSScript.com]] - Más recursos CSS
   - [[http://www.w3schools.com/cssref/][Guía de referencia de propiedades CSS]] - Listado de propiedades CSS
   - http://librosweb.es/css/ - Curso completo de CSS pero algo anticuado

*** DONE Notas sobre el modelo de cajas en CSS                  :modelo_caja:
    CLOSED: [2019-10-21 lun 11:47]
    :PROPERTIES:
    :EXPORT_FILE_NAME: modelo-caja-css
    :END:

El [[https://developer.mozilla.org/es/docs/Web/CSS/CSS_Modelo_Caja/Introducci%C3%B3n_al_modelo_de_caja_de_CSS][modelo de caja de CSS]] tiene como objetivo definir el comportamiento de los elementos en HTML. En concreto define el *contenido*, *relleno*, *bordes* y *márgenes*. Se utiliza en gran medida para disponer los elementos en una estructura determinada (el denominado *layout*). En este artículo veremos un par de características relacionadas con él que pueden ser de mucha utilidad: la propiedad ~box-sizing~ y el comportamiento de la *anchura y altura* de las cajas.
#+hugo: more

**** La propiedad ~box-sizing~
  Existe una propiedad en CSS3 denominada ~box-sizing~ que permite cambiar la definición de anchura para ésta que incluya el *contenido, relleno (padding) y bordes* (no se incluye el margen). En este [[http://www.w3schools.com/cssref/css3_pr_box-sizing.asp][enlace]] puedes consultar su funcionamiento.

  De esta manera, al utilizar el código ~box-sizing: border-box;~, no habrá que hacer sumas para calcular el ancho total de las cajas. En este otro [[http://es.learnlayout.com/box-sizing.html][enlace]] puedes encontrar una explicación más detallada.

**** Altura y anchura de los elementos
  La utilización de porcentajes en la definición de anchuras y alturas tiene algunas diferencias:
  - La *anchura* de los elementos es *independiente de su contenido*: depende del ancho del elemento contenedor o del ancho de la ventana del navegador en última instancia.
  - La *altura* de los elementos es *dependiente* de su contenido: si el contenido ocupa más espacio, la altura será mayor; si ocupa menos, será menor.

  Debido a estas características, la utilización del *porcentaje* como unidad de medida varía: mientras que puede utilizarse *sin problemas en la anchura* aunque no se defina una anchura absoluta de base (ya que el 100% corresponde al ancho del contenedor), para que pueda utilizarse en la *altura* deberá definirse una *altura de referencia* en algún elemento *contenedor* para que pueda funcionar correctamente.

  Para solucionar este problema puede utilizarse la unidad ~vh~ en lugar del porcentaje. Puedes encontrar la explicación en este [[http://stackoverflow.com/questions/1622027/percentage-height-html-5-css][enlace]].

  A continuación se muestra un ejemplo de cómo especificar altura de capas: [[http://jsbin.com/hajuki/edit?html,css,output][ver ejemplo de altura de capas]]. 

*** DONE Unidades de medida                        :medida:unidades:viewport:
    CLOSED: [2019-10-21 lun 12:28]
    :PROPERTIES:
    :EXPORT_FILE_NAME: unidades-medida-css
    :END:

  En este artículo estudiaremos las unidades de medida más utilizadas en CSS, así como las diferencias más importantes entre las unidades *relativas* y las unidades *absolutas*.
  #+hugo: more

     CSS define distintas unidades para representar medidas. Dichas unidades se pueden consultar en el siguiente enlace: [[http://www.w3schools.com/cssref/css_units.asp][unidades CSS 2.1]].

     CSS 3 define algunas unidades adicionales: [[http://www.w3.org/TR/css3-values/][unidades CSS 3]].

     El uso de una u otra unidad vendrá marcado por el tipo de *pantalla objetivo* (referencia: [[http://www.w3.org/Style/Examples/007/units][aquí]]):

     |           | Recomendado               | Uso ocasional | No recomendado     |
     |-----------+---------------------------+---------------+--------------------|
     | Pantalla  | em, px, %                 | ex            | pt, cm, mm, in, pc |
     | Impresión | em, cm, mm, in, pt, pc, % | px, ex        |                    |

     A continuación veremos un pequeño resumen de las características de las unidades más utilizadas.

**** Unidades absolutas
  Las unidades absolutas se pueden consultar en este enlace: [[http://www.w3.org/TR/css3-values/#absolute-lengths][unidades absolutas]].

  | unidad | definición                     |
  |--------+--------------------------------|
  | ‘cm’   | centímetro                     |
  | ‘mm’   | milímetros                     |
  | ‘in’   | pulgadas (1in = 2.54cm)        |
  | ‘px’   | píxeles (1px = 1/96in)         |
  | ‘pt’   | puntos (1pt = 1/72in = 0.35mm) |
  | ‘pc’   | picas (1pc = 12pt = 4.23mm)    |

  La relación entre unidades de medida es la siguiente: 1in = 2.54cm = 25.4mm = 72pt = 6pc 

  En general se utilizarán las unidades absolutas cuando se pretenda determinar el *tamaño exacto* que tendrán los elementos. Estas unidades son especialmente útiles para definir el *tamaño de imágenes* o capas que queremos que ocupen exactamente el tamaño de una imagen.

  Estas unidades son también útiles para definir estilos para *hojas impresas* (por ejemplo, para especificar el tamaño de una fuente en puntos).

  El inconveniente de estas unidades es que *no se adaptan bien a tipos de pantalla distintos* (móviles, tabletas,...) o de distintos tamaños.

**** Unidades relativas
  Las unidades relativas se pueden consultar en este enlace: [[http://www.w3.org/TR/css3-values/#relative-lengths][unidades relativas]]. Las unidades relativas expresan tamaños en función de otros.

  | unidad | relativa a                                              |
  |--------+---------------------------------------------------------|
  | ‘em’   | tamaño de letra del elemento                            |
  | ‘ex’   | altura del carácter 'x' del tipo de letra del elemento  |
  | ‘ch’   | anchura del carácter '0' del tipo de letra del elemento |
  | ‘rem’  | tamaño de letra del elemento raíz                       |
  | ‘vw’   | 1% de la anchura del viewport                           |
  | ‘vh’   | 1% de la altura del viewport                            |
  | ‘vmin’ | 1% de la dimensión más pequeña del viewport             |
  | ‘vmax’ | 1% de la dimensión más alta del viewport                |

  La ventaja de utilizar estas unidades es que se *adaptan muy bien a distintos tipos y tamaños de pantalla*. 

  El valor de las medidas relativas no se hereda directamente, sino que se hereda su *valor real una vez calculado*. 

  A continuación estudiaremos las características de las unidades más utilizadas.

***** Unidad 'em'
  Esta unidad hace referencia al *tamaño de letra calculado heredado por el elemento*. Por tanto, para calcular el valor real aplicado habrá que determinar los *valores que se van heredando* de los elementos *contenedores*. A continuación se muestra un ejemplo:

  #+BEGIN_SRC css
  html {
    font-size: 12px;
    text-indent: 1em; /* 1em = 12px */
  }

  p {                 /* Hereda 1em = 12px; */
    font-size: 0.5em; /* Tamaño = 6px */
  }

  p span {            /* Hereda 1em = 6px */
    font-size: 0.5em; /* Tamaño = 3px */
  }
  #+END_SRC

***** Unidad 'rem'
  Esta unidad tiene una *referencia fija*, que es el *tamaño de letra definido en el elemento raíz*. Por tanto, para calcular el valor real aplicado simplemente hay que mirar el elemento raíz. A continuación se muestra un ejemplo:

  #+BEGIN_SRC css
  html {
    font-size: 12px;
    text-indent: 1rem; /* 1em = 12px */
  }

  p {                 
    font-size: 0.5rem; /* Tamaño = 6px */
  }

  p span {            
    font-size: 0.5rem; /* Tamaño = 6px */
  }
  #+END_SRC

  Estas unidades simplifican los cálculos al tener una referencia fija (no hay que ir calculando valores heredados de los elementos contenedores).

***** Porcentaje
  El porcentaje suele tomarse como una unidad relativa más. Un porcentaje de un 100% hace referencia al tamaño calculado del elemento contenedor (un tamaño de un 100% en un tipo de letra hace referencia al tamaño del tipo de letra aplicado en el elemento contenedor). Por tanto, para calcular el valor real aplicado habrá que determinar los *valores que se van heredando* de los elementos *contenedores*. A continuación se muestra un ejemplo:

  #+BEGIN_SRC css
  body {
    width: 1024px; /* 100% = 1024px */
  }

  div {            /* Hereda 100% = 1024px */
    width: 50%;    /* Anchura = 512px */
  }

  div div {        /* Hereda 100% = 512px */
    width: 50%;    /* Anchura = 256px */
  }
  #+END_SRC

***** Unidades 'vw', 'vh', 'vmin' y 'vmax'
  Estas unidades hacen referencia al tamaño del *[[https://www.w3schools.com/css/css_rwd_viewport.asp][viewport]]*. CSS define el /viewport/ como el *tamaño del área que se utiliza para representar la página web*. Coincide con el ~<body>~ incluyendo los márgenes. Es importante indicar que en los *navegadores móviles* el /viewport/ tiene un *tamaño superior al tamaño real* de la pantalla: es por ello que las páginas web se muestran completas como vistas desde un zoom de alejamiento (este tema será tratado con más detalle más adelante).

  Estas unidades tienen una *referencia fija*, que es el ancho ('vw'), alto ('vh'), dimensión más pequeña ('vmin') o dimensión más grande ('vmax') del /viewport/. Por tanto, para calcular el valor real aplicado simplemente hay que mirar el elemento raíz. A continuación se muestra un ejemplo:

  #+BEGIN_SRC css
  /* Suponemos que el ancho de la pantalla
  del dispositivo es de 1024px, por lo que
  100vw = 1024px */

  div {            /* 1vw = 1024/100 */
    width: 50vw;   /* Anchura = 512px */
  }

  div div {         /* 1vw = 1024/100 */
    width: 50vw;    /* Anchura = 512px */
  }
  #+END_SRC

  Como ocurre con las unidades 'rem', las unidades relativas al /viewport/ simplifican los cálculos al tener una referencia fija.
*** DONE Minimización de hojas de estilo                :minimizar:optimizar:
    CLOSED: [2019-10-21 lun 12:39]
    :PROPERTIES:
    :EXPORT_FILE_NAME: minimizacion_css
    :END:

La minimización de código tiene como objetivo *reducir el tamaño del archivo eliminando caracteres innecesarios*. Se utiliza en diseño web para reducir el tamaño de los archivos CSS y JavaScript y así reducir el tiempo de carga del sitio web.
#+hugo: more

El proceso de minimización es *distinto del de compresión*, ya que el archivo minimizado es totalmente compatible con el original y no requiere de un proceso previo (descompresión) para su correcta interpretación.

El procedimiento consiste en eliminar *espacios en blanco* innecesarios, *saltos de línea* y *comentarios*. En ocasiones también se renombran los nombres de variables (cambiándolas por otros más cortos, como letras) y se optimiza el código eliminando las instrucciones innecesarias o redundantes.

**** Herramientas
Existen varias herramientas para minimizar código. En concreto, para CSS podemos utilizar algunos de los siguientes servicios online:

- https://jakubpawlowicz.github.io/clean-css/ - Optimizador CSS: además de minimizar es capaz de eliminar reglas duplicadas o reestructurar el código
- http://cssminifier.com/
- http://csscompressor.com/
- http://gpbmike.github.io/refresh-sf/

*** DONE Variables y preprocesadores CSS :variables:preprocesadores:sass:less:
    CLOSED: [2019-10-22 mar 09:54]
    :PROPERTIES:
    :EXPORT_FILE_NAME: variables_preprocesadores_css
    :END:

En los últimos años han aparecido una gran cantidad de [[https://developer.mozilla.org/es/docs/Glossary/Preprocesador_CSS][preprocesadores CSS]] que permiten incorporar técnicas de lenguajes de programación (variables, anidamiento, [[https://es.wikipedia.org/wiki/Mixin][mixins]],...) a la creación de hojas de estilo. La desventaja que tienen es que el código debe *compilarse* para generar CSS válido que pueda ser utilizado por el navegador.

Frente a esto, es interesante conocer que CSS permite definir *variables* que pueden ser reutilizadas en todo el documento, proporcionando una alternativa sencilla y estándar, aunque lógicamente menos potente.
#+hugo: more

**** Preprocesadores CSS
Los preprocesadores CSS permiten utilizar un lenguaje especial para definir código CSS. Dicho lenguaje depende del preprocesador elegido y suele ser muy parecido al CSS convencional.

El lenguaje debe ser *compilado* a CSS para que los navegadores puedan usarlo. A continuación podemos ver un ejemplo de *SASS*:

#+begin_src sass
$font-stack:    Helvetica, sans-serif
$primary-color: #333

body
  font: 100% $font-stack
  color: $primary-color

nav
  ul
    margin: 0
    padding: 0
    list-style: none

  li
    display: inline-block

  a
    display: block
    padding: 6px 12px
    text-decoration: none
#+end_src

Y el resultado de la compilación en CSS:

#+begin_src css
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}
nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}
#+end_src

A continuación se enumeran algunos de los preprocesadores CSS más utilizados son:
- [[https://sass-lang.com/][SASS]]
- [[http://lesscss.org/][LESS]]
- [[https://postcss.org/][PostCSS]]
- [[http://stylus-lang.com/][Stylus]]

**** Variables CSS
Una de las características quizá más interesantes de utilizar un preprocesador CSS es la posibilidad de crear *variables* que puedan ser reutilizadas en el resto de la hoja de estilos. De esta manera se pueden definir determinados valores (por ejemplo, colores) para poder utilizarlos en múltiples clases CSS. Pensemos por ejemplo en la creación de una biblioteca de componentes CSS personalizados: puede ser interesante *parametrizar* determinados aspectos como el color o el color de fondo para diseñar distintos componentes (botones, menús, tablas,...) que muestren un aspecto visual común y que permitan una posterior personalización. 

Es posible hacer uso de esta característica sin tener que recurrir a un preprocesador haciendo uso de las *[[https://developer.mozilla.org/es/docs/Web/CSS/Using_CSS_custom_properties][propiedades personalizadas CSS]]*. A continuación se muestra un ejemplo:

#+begin_src css -n :hl_lines 2,7,16,23
:root {
  --color-fondo-principal: brown;
}

.uno {
  color: white;
  background-color: var(--color-fondo-principal);
  margin: 10px;
  width: 50px;
  height: 50px;
  display: inline-block;
}

.dos {
  color: white;
  background-color: var(--color-fondo-principal);
  margin: 10px;
  width: 75px;
}

.tres {
  color: white;
  background-color: var(--color-fondo-principal);
  margin: 10px;
  width: 100px;
}

#+end_src

*** DONE Estrategias de diseño con CSS                                  :BEM:
    CLOSED: [2019-10-22 mar 11:51]
    :PROPERTIES:
    :EXPORT_FILE_NAME: estrategias_diseno_css
    :END:

En ocasiones resulta difícil pensar en cómo abordar el diseño con CSS. Las recomendaciones actuales van en la línea de priorizar el *uso de clases* para poder utilizarlas dentro de los archivos HTML. Dentro de esta recomendación nos encontramos con dos posibilidades: priorizar el *diseño de componentes* o priorizar el diseño de *clases de utilidades*.
#+hugo: more

**** Diseño basado en componentes
 Esta filosofía de diseño prioriza el desarrollo de clases CSS que hagan referencia a *componentes* creados en HTML. Un componente puede ser una tarjeta, un menú, un formulario o un botón. De esta manera tendríamos CSS como el siguiente:

#+begin_src css
.card {
    background: white;
    border: 1px solid grey;
    text-align: justify;
}

.card--left {
    text-align: left;
}

.card--right {
    text-align: right;
}

.tooltip {
    background: black;
    color: white;
    text-align: center;
}
#+end_src

Como podemos ver, las clases CSS hacen referencia a componentes que serán creados en HTML.

Dentro de este tipo de diseño podemos distinguir dos enfoques: el primero sería la creación de clases CSS *anidadas*:
#+begin_src html
<div class="autor">
  <img src="" alt="">
  <div class="contenido">
    <h2 class="nombre">Juan Gómez</h2>
  </div>
</div>
#+end_src

#+begin_src css
.autor {
    background-color: white;
    border: 1px solid hsl(0,0%,85%);
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
}
.autor img {
    display: block;
    width: 100%;
    height: auto;
}
.autor .contenido {
    padding: 1rem;
}
.autor .nombre {
    font-size: 1.25rem;
    color: rgba(0,0,0,0.8);
}
#+end_src

El segundo sería la creación de clases CSS *independientes* (uno de los ejemplos más utilizados es la metodología [[http://getbem.com/naming/][BEM]]):
#+begin_src html
<div class="autor">
  <img class="autor__img" src="" alt="">
  <div class="autor__contenido">
    <h2 class="autor__nombre">Juan Gómez</h2>
  </div>
</div>
#+end_src

#+begin_src css
.autor {
    background-color: white;
    border: 1px solid hsl(0,0%,85%);
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
}
.autor__img {
    display: block;
    width: 100%;
    height: auto;
}
.autor__contenido {
    padding: 1rem;
}
.autor__nombre {
    font-size: 1.25rem;
    color: rgba(0,0,0,0.8);
}
#+end_src

***** Ventajas:
- Se prioriza el significado *[[https://developer.mozilla.org/en-US/docs/Glossary/Semantics][semántico]]* de las clases: los nombres de clase hacen referencia a entidades con significado dentro de la estructura HTML, ya que hacen referencia a componentes con una funcionalidad definida.
- Produce un código *fácil de leer*.
- Se crea código *estructurado* en función de los distintos componentes que tenga la página.

***** Desventajas:
- Las clases van asociadas a una determinada estructura HTML, por lo que resulta *difícil reutilizarlas*.
- La creación *variaciones de un tipo de componente* es complicada: normalmente supone duplicar código CSS, modificar el HTML o crear clases que deshagan las acciones creadas por la clase original.
- Se favorece el paradigma de *herencia* sobre el de *composición*: normalmente acaban creándose múltiples niveles de abstracciones que se van heredando para dar servicio a todos los posibles casos.

**** Diseño basado en clases de utilidades
Por el contrario, este paradigma de diseño prioriza el desarrollo de clases CSS que implementen *pequeñas funcionalidades* que puedan ser reutilizadas por todos los elementos o componentes de la página. Un ejemplo de código sería el siguiente:

#+begin_src css
/* Font sizes */
.font-13 { font-size: 13px }
.font-16 { font-size: 16px }
...

/* Font styles */
.font-bold { font-weight: bold }
.font-italic { font-style: italic }
...

/* Font colors */
.font-purple { color: purple }
...
#+end_src

Como podemos ver, las clases CSS hacen referencia a características genéricas no asociadas a ningún componente o estructura HTML específica: pueden ser utilizadas por multitud de ellos (enlaces, encabezados, menús, botones,...).

***** Ventajas:
- El código CSS resulta altamente *reutilizable*, ya que las clases no suelen estar asociadas a estructuras HTML determinadas o con función específica.
- Favorece el patrón de *[[https://en.wikipedia.org/wiki/Composition_over_inheritance][composición sobre herencia]]*, por lo que la creación de componentes ligeramente distintos de los originalmente planteados resulta más fácil que con el patrón de diseño basado en componentes.

***** Desventajas:
- Aumenta el número de clases a aplicar en etiquetas HTML, por lo que el código HTML puede resultar más difícil de leer:
#+begin_src html
<h2 class="font-16 font-bold font-purple">Game of Thrones</h2>
#+end_src
- Aumenta el número de clases disponibles, por lo que puede resultar difícil conocerlas todas o saber cuál aplicar.

**** Conclusión
Como hemos podido ver, tenemos dos posibilidades de enfocar el diseño de clases en CSS. ¿Cuál deberíamos elegir? La respuesta depende por supuesto de las metodologías de trabajo, el tipo de proyecto y las elecciones personales. Quizá la mejor opción sería optar por una aproximación del tipo *clases de utilidades Primero* y proceder a una posterior *abstracción* en forma de componentes cuando se vean *patrones repetidos*.

**** Referencias
- http://getbem.com/
- https://frontstuff.io/in-defense-of-utility-first-css
- https://adamwathan.me/css-utility-classes-and-separation-of-concerns/

*** DONE Tipos de layouts                                            :layout:
    CLOSED: [2019-10-28 lun 13:15]
    :PROPERTIES:
    :EXPORT_FILE_NAME: tipos_layout
    :END:

   El /layout/ o *estructura* de un interfaz web es la manera de organizar o disponer los elementos visuales en la página. El diseño del layout determina la posición de cada uno de los elementos que componen el interfaz web (cabecera, menús, banners, contenido, etc.).
#+hugo: more

   Además, el diseño del layout comprende también una serie de decisiones que afectan a las siguientes *características*:

   - Tamaño de los márgenes.
   - Tamaño y posición de imágenes y figuras.
   - Número de columnas (o áreas) en que se divide la página.
   - Áreas dejadas en blanco intencionadamente.

**** Santo Grial
   Uno de los patrones de diseño más utilizados es un diseño formado por varias (normalmente tres) columnas, con el contenido principal ocupando una de ellas (normalmente en el centro) y el resto de elementos (menús, banners,...) en las otras columnas. Las columnas idealmente deben tener la misma altura independientemente de su contenido y opcionalmente pueden tener bordes o colores de fondo diferenciados.
   
   #+BEGIN_SRC ditaa :results silent :file ./images/holy_grial.png
         +---------------------+
         +-----+--------+------+
         |     |        |      |
         |     |        |      |
         |     |        |      |
         |     |        |      |
         |     |        |      |
         |     |        |      |
         +-----+--------+------+
         +---------------------+
   #+END_SRC

   #+CAPTION: Diseño de Santo Grial
   #+ATTR_HTML: :alt Diseño de Santo Grial
   [[../../images/02_02_holy_grial.png][file:./images/holy_grial.png]]


   Aunque parece sencillo de conseguir, no hay ninguna solución óptima para este diseño. Todas ellas tienen algún inconveniente:

   - Visualización incorrecta en algún navegador.
   - Utilización de muchas etiquetas HTML.
   - Utilización de etiquetas HTML sin significado semántico (es decir, que se utilicen no para estructurar el contenido, sino para alterar la apariencia visual).
   - Adaptación incorrecta en dispositivos móviles.
   - Necesidad de utilizar lenguaje de script.

**** Métodos antiguos
***** Tablas
   - Problemas semánticos.
   - Mezcla de estructura (HTML) con presentación visual.
   - Difícil de mantener.
   - Problemas con lectores de pantalla.
   - Problemas de tiempo de respuesta de los navegadores.

   #+BEGIN_SRC ditaa :results silent :file ./images/layout_tables.png
        +---------------------------+------------------------------+
        |                           |                              |
        |                           |                              |
        |        tr td 1.1          |                              |
        |                           |                              |
        |                           |            td 2.1            |
        |                           |                              |
        +---------------------------+                              |
        |                           |                              |
        |        tr td 1.2          |                              |
        |                           |                              |
        +---------------------------+------------------------------+
   #+END_SRC

   #+CAPTION: Diseño basado en tablas
   #+ATTR_HTML: :alt Diseño basado en tablas
   [[../../images/02_02_tables.png][file:./images/layout_tables.png]]

***** Posicionamiento absoluto
   - Rígido e inflexible.
   - Utilizado para versiones que deban ser impresas
   - Unidades de medida absolutas (cm, mm,...).

***** Anchura fija
   - Muy popular.
   - Se crea una capa contenedora que alberga todo el contenido de la página.
   - Se asigna una anchura fija al contenedor: típicamente un tamaño de 980px, 960px o 760px.
   - El contenedor se centra automáticamente cuando se muestra en una pantalla grande.
   - Aparece una barra de desplazamiento horizontal cuando se muestra en una pantalla pequeña.
   - Utiliza el píxel como unidad de medida principal.

   Ventajas:
   - Ajuste perfecto. Son sitios que hacen uso de gran cantidad de imágenes y estructuras muy complejas. Necesitan controlar exactamente el tamaño de las capas para que las imágenes acoplen perfectamente.
   - Fácil de desarrollar y mantener.

   Desventajas:
   - Poco usabilidad en pantallas pequeñas.
   - No se adaptan correctamente a dispositivos móviles.
   - No se adaptan correctamente frente a un aumento de zoom o aumento del tamaño del texto.

**** Diseño responsivo
   Los métodos actuales de diseño de layouts suelen tener las siguientes características:

   - No utilizan anchuras fijas.
   - Se adaptan correctamente a pantallas pequeñas y grandes.
   - Utilizan unidades CSS relativas (ems, rems, porcentajes, valores mínimos y máximos,...).
   - Utilizan media queries CSS3 para proporcionar versiones distintas a cada dispositivo en función de su resolución de pantalla.

   Ventajas:
   - Muy buena experiencia de uso independientemente del dispositivo o tamaño de pantalla elegido.

   Desventajas:
   - Todos los dispositivos reciben todo el código independientemente de si lo van a utilizar o no.
   - Difícil de desarrollar y testear.
   - No hay un control perfecto a nivel de píxel: por tanto, puede ser difícil adaptar imágenes de tamaño fijo.

   Ejemplos:
   - http://designmodo.com/responsive-design-examples/
   - http://seesparkbox.com/

***** Conclusiones
   Independientemente del modelo de layout elegido, el objetivo que se persigue es:

   - Proporcionar a los usuarios una buena *experiencia de uso*.
   - Servir una página web que funcione y se comporte de manera óptima independientemente del dispositivo o tamaño de pantalla utilizado sin comprometer la experiencia de uso.

*** DONE Técnicas para crear layouts                    :layout:flexbox:grid:
    CLOSED: [2019-10-28 lun 18:02]
    :PROPERTIES:
    :EXPORT_FILE_NAME: tecnicas_layout
    :END:

  En la actualidad existen muchas maneras de crear layouts utilizando CSS. A las técnicas tradicionales (~float~, ~inline-block~) se suman otras nuevas aportadas por CSS3, como [[https://developer.mozilla.org/es/docs/Web/CSS/CSS_Flexible_Box_Layout/Conceptos_Basicos_de_Flexbox][flexbox]] o [[https://developer.mozilla.org/es/docs/Web/CSS/CSS_Grid_Layout][CSS Grid Layout]].
#+hugo: more

  A continuación veremos las principales técnicas de creación de layouts utilizadas en el diseño web.

**** Float
  Se utilizan para layouts que no necesitan centrado vertical ni alturas de capas iguales.

  Ventajas:
  - Método más popular.
  - Al ser el método más popular, los fallos que se producen están muy bien documentados y se han desarrollado muchos métodos para corregirlos.

  Desventajas:
  - Necesitan ser reseteados ([[http://stackoverflow.com/questions/8554043/what-is-clearfix][clearfix]]). Si se utilizan /media queries/ para personalizar la apariencia en función del dispositivo será necesario hacer un /clear/ para cada adaptación.
  - No se pueden alinear en vertical.
  - Las alturas de las capas no son iguales.
  - Dependen del orden en que aparezcan las capas en el HTML.

**** Inline-block
  Se utilizan cuando se necesitan layouts con las siguientes características:

  - Sitios que necesitan alineación vertical.
  - Para evitar tener que realizar el /clear/ de los floats cuando se utilizan /media queries/.
  - Para realizar menús horizontales utilizando listas.

  Ventajas:
  - Posibilidad de alineación vertical.
  - No necesitan hacer /clear/ en diseños complejos adaptados a muchos dispositivos con /media queries/.

  Desventajas:
  - Las alturas de las capas no son iguales.
  - Dependen del orden en que aparezcan las capas en el HTML.
  - Tienen un fallo que consiste en *crear un espacio en blanco adicional* (/whitespace bug/) entre los elementos. La solución si utilizamos listas consiste en utilizar tipos de documento HTML5 y no cerrar los elementos ~<li>~. En este [[http://blog.karenmenezes.com/2013/aug/30/inline-block-conundrum-part-2/][enlace]] se muestra el problema.

  Ejemplo de galería con ~inline-block~: http://karenmenezes.com/inlineblockgrid/

**** Display table
  La propiedad ~display: table~ automáticamente transforma la apariencia de una capa en la de una tabla. De esta manera se consigue un diseño basado en columnas de manera muy sencilla sin tener que utilizar tablas reales (que, recordemos, no son recomendables).

  Sin embargo, para tener un control total es necesario replicar la estructura de una tabla utilizando ~divs~, por lo que se termina cayendo en el mismo error que al diseñar utilizando tablas.

  #+BEGIN_SRC html
    <div class="tableWrap">    
      <div class="tableBlock">    

        <div class="tableRow">
          <div class="tableCell"> </div>
          <div class="tableCell"> </div>
          <div class="tableCell"> </div>
        </div>

        <div class="tableRow">
          <div class="tableCell"> </div>
          <div class="tableCell"> </div>
          <div class="tableCell"> </div>
        </div>

      </div>
    </div> 

  #+END_SRC

  Ventajas:
  - Posibilidad de alineación vertical.
  - Permite crear capas de alturas iguales.

  Desventajas:
  - Es necesario crear ~<div>~ adicionales para simular la estructura de las tablas. No obstante, la especificación indica que no es obligatorio.
  - Dependen del orden en que aparezcan las capas en el HTML.
  - Para separar las celdas no se pueden utilizar los márgenes: hay que utilizar la propiedad ~border-collapse~ del elemento padre.
  - Es posible que el contenido traspase los límites de las celdas.
  - Es difícil de adaptar para crear diseños responsivos con varios puntos de ruptura.
  - Problemas con IE6 y IE7.

**** Cajas Flexibles (FlexBox)

  *FlexBox* ofrece un mecanismo muy completo para realizar layouts. Tiene una gran variedad de opciones y es muy versátil.

  Para aprender a manejar FlexBox se pueden consultar estos tutoriales:
  - https://css-tricks.com/snippets/css/a-guide-to-flexbox/
  - https://developer.mozilla.org/es/docs/Web/Guide/CSS/Cajas_flexibles
  - http://demo.agektmr.com/flexbox/

  Ventajas:
  - Independencia del orden en que aparezcan las capas en el HTML. Elimina la necesidad de utilizar JavaScript para esto.
  - Ofrecen alineación vertical.
  - Permiten crear capas con la misma altura.
  - Permiten la estructura en filas o columnas de manera sencilla.
  - Ofrecen una gran flexibilidad en cuanto a las opciones a utilizar.
  - Las cajas pueden ocupar automáticamente el espacio disponible, crecer o menguar a petición.

  Desventajas:
  - Existe una especificación inicial que ha quedado desfasada (hay que tener cuidado al buscar tutoriales en Internet).
  - La sintaxis es algo compleja.
  - Es necesario utilizar prefijos para soportar todos los navegadores.
  - No es compatible con IE9 y anteriores.

**** COMMENT Template module
  Especificación: http://www.w3.org/TR/2009/WD-css3-layout-20090402/ o http://dev.w3.org/csswg/css-template/
  Código JQuery: http://code.google.com/p/css-template-layout/
  ¿Abandonado?

**** Grid layout
  Su funcionamiento consiste en definir una serie de zonas dispuestas a modo de rejilla para a continuación asignar cada capa o sección a la zona correspondiente.

  Tiene múltiples ventajas, entre las que destacan las siguientes:
  - *Eliminación* total de la necesidad de definir *capas contenedoras*. Bastará con tener una capa para cada área independiente de la página.
  - Independencia del orden en que aparezcan las capas en el HTML.
  - *Independencia completa* entre *HTML* y *presentación visual*.

  Para aprender más sobre Grid Layout puedes consultar:
  - https://css-tricks.com/snippets/css/complete-guide-grid/
  - https://www.w3schools.com/css/css_grid.asp
  - https://developer.mozilla.org/es/docs/Web/CSS/CSS_Grid_Layout/Conceptos_B%C3%A1sicos_del_Posicionamiento_con_Rejillas
  - https://developer.mozilla.org/es/docs/Web/CSS/grid-template-areas

**** Algunos consejos de diseño
   - Los bloques que aparecen uno *debajo del otro no presentan problemas*: se muestran correctamente si son ~display: block~ (recordemos que estos elementos introducen saltos de línea, por lo que se muestran uno a continuación del otro).
   - El *problema* aparece cuando tenemos capas que deben aparecer a la *derecha o izquierda* de otras. En ese caso tendremos que utilizar alguno de los métodos propuestos.
   - La manera más sencilla de diseñar el layout consiste en hacer *agrupaciones por filas o columnas*:
     - Se deben buscar las *filas* que lleguen a los extremos de las capas contenedoras.
     - Dentro de cada fila se procederá a agrupar por *columnas* que lleguen a su vez a los extremos de los contenedores.
     - Se continuará de esta manera (filas, columnas,...) hasta completar el diseño.


   #+BEGIN_SRC  ditaa :results silent :file ./images/disenyo_layout.png



                                                                                 
     +------------------------+       +------------------------+       +------------------------+       +------------------------+
     |        Cabecera        |       |           A            |       |            A           |       |            A           |
     +------+----------+------+       +------------------------+       +------+-----------+-----+       +------+-----------+-----+
     |      |          |      |       |                        |       |      |           |     |       |      |           |     |
     |  L1  |          |      |       |                        |       |      |           |     |       | B11  |           |     |
     |      |          |      |       |                        |       |      |           |     |       |      |           |     |
     +------+          |      |       |                        | ----> |      |           |     | ----> +------+           |     |
     |      |  Cuerpo  |  R1  |       |           B            |       |  B1  |    B2     | B3  |       |      |    B2     | B3  |
     |      |          |      |       |                        |       |      |           |     |       |      |           |     |
     |  L2  |          |      |       |                        |       |      |           |     |       | B12  |           |     |
     |      |          |      |       |                        |       |      |           |     |       |      |           |     |
     |      |          |      |       |                        |       |      |           |     |       |      |           |     |
     +------+----------+------+       +------------------------+       +------+-----------+-----+       +------+-----------+-----+
     |           Pie          |       |           C            |       |            C           |       |            C           |
     |                        |       |                        |       |                        |       |                        |
     +------------------------+       +------------------------+       +------------------------+       +------------------------+
                 :                                                                                                    ^        
                 |                                                                                                    |         
                 +----------------------------------------------------------------------------------------------------+            
                                                                                                                             
   #+END_SRC

   #+CAPTION: Agrupación por filas y columnas
   #+ATTR_HTML: :alt Agrupación por filas y columnas
   [[../../images/02_02_disenyo.png][file:./images/disenyo_layout.png]]



   Por último, es recomendable pensar en el layout más adecuado para *dispositivos móviles* o pantallas pequeñas. Este tema será abordado con más detalle en otros artículos.

*** TODO Layout y formularios
- Formularios HTML - Validación, etc.

*** TODO Diseño responsivo
- Mobile First + media queries
*** TODO Ideas
- Posicionamiento absoluto, floats
- Animaciones y transiciones CSS
- API HTML para móvil (cámara, geoloc,...)
- Componentes CSS+JS (menús, nav, botones,...)
- Overflow + capas + z-index
- Imágenes cabecera: tamaños, escalado,...
- Centrado de elementos
- Fuentes, iconos, "content"
- Imágenes vectoriales + píxeles
- Canvas HTML
- iFrames
- Guía de búsqueda de recursos
- Diseño con clases CSS: BEM y otras estrategias
