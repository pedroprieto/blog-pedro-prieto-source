* Fundamentos Git I
** Tarea
 1. Instala Git en tu sistema operativo. Adjunta una captura de pantalla en la que aparezca el resultado de la ejecución del comando ~git --version~.
 2. Realiza la configuración de Git según lo indicado en el tema (nombre, correo electrónico, editor de preferencia y almacenamiento de credenciales). Adjunta una captura de pantalla con el resultado de la ejecución de los comandos de configuración.
 3. Crea una carpeta denominada ~S1R1~. Realiza las siguientes acciones en ella:
    1) Crea un repositorio Git.
    2) Crea un fichero denominado ~libros.txt~. Añade tres títulos de libros cada uno en una línea distinta.
    3) Haz un primer /commit/.
    4) Añade dos libros al archivo ~libros.txt~.
    5) Haz un segundo /commit/.
    6) Crea un fichero denominado ~peliculas.txt~. Añade tres títulos de películas a dicho archivo.
    7) Haz una captura de pantalla del comando ~git status~.
    8) Crea un fichero denominado ~comidas.txt~. Añade tres nombres de comidas a dicho archivo.
    9) Haz un tercer /commit/ que incluya los archivos ~peliculas.txt~ y ~comidas.txt~.
    10) Elimina el archivo ~comidas.txt~ desde el navegador de archivos.
    11) Añade dos películas más al archivo ~peliculas.txt~.
    12) Haz una captura de pantalla que muestre los cambios en el directorio de trabajo.
    13) Añade los cambios al área de preparación.
    14) Haz una captura de pantalla del comando ~git status~. Debe indicar que se ha borrado el archivo ~comidas.txt~ y que se ha modificado el archivo ~peliculas.txt~.
    15) Haz un cuarto /commit/.
    16) Crea un archivo denominado ~datos.bak~. Añade tres títulos de libros a dicho archivo.
    17) Crea una subcarpeta denominada ~output~. Crea un archivo denominado ~salida.txt~ en su interior. Escribe tu nombre y apellidos en dicho archivo.
    18) Haz una captura de pantalla del comando ~git status~. Deben aparecer los archivos ~datos.bak~ y ~output/salida.txt~ como archivos nuevos.
    19) Crea un archivo ~.gitignore~ para que los ficheros con extensión ~.bak~ y el contenido de la carpeta ~output/~ no se incluyan en el repositorio.
    20) Haz una nueva captura de pantalla del comando ~git status~. Ahora no deben aparecer los archivos ~datos.bak~ y ~output/salida.txt~ como archivos nuevos, sino que en su lugar debe aparecer únicamente el archivo ~.gitignore~.
    21) Haz un último /commit/ para incluir el archivo ~.gitignore~ en el repositorio.
    22) Haz una captura de pantalla que muestre el histórico de cambios del repositorio.
 4. Para terminar, comprime la carpeta ~S1R1~ y envíala junto con las capturas de pantalla según el procedimiento que se indica en el apartado siguiente.

*** Entrega de la tarea
 Crea un fichero ~.zip~ con los resultados que se piden en cada una de las tareas y nómbralo según el patrón ~APELLIDOS_NOMBRE_sesion1.zip~. La entrega del fichero se realizará a través de la plataforma de educación a distancia https://aules.edu.gva.es.

* Fundamentos Git II
** Tareas
 1) Crea una carpeta denominada ~S2R1~. Realiza las siguientes acciones en ella:
    1. Crea un repositorio Git.
    2. Crea un fichero denominado ~actores.txt~. Añade tres nombres de actores cada uno en una línea distinta.
    3. Haz un primer /commit/.
    4. Crea una rama denominada /test/.
    5. En la rama /test/ crea un fichero denominado ~actrices.txt~. Añade tres nombres de actrices y realiza un /commit/ en dicha rama.
    6. Haz una captura de pantalla del resultado del comando ~git log --graph --all~.
    7. Incorpora los cambios de la rama /test/ a la rama /master/. Haz una captura de pantalla de los comandos que has utilizado y de su resultado.
    8. Posiciónate en la rama /master/.
    9. Crea una segunda rama denominada /test2/.
    10. En la rama /master/, añade una actriz al fichero ~actrices.txt~.
    11. En la rama /test2/, añade una actriz al fichero ~actrices.txt~.
    12. Haz una captura de pantalla del resultado del comando ~git log --graph --all~. Debe haber dos caminos distintos: uno para la rama /master/ y otro para la rama /test2/.
    13. Incorpora los cambios de la rama /test2/ a la rama /master/. ¿Se produce un conflicto? De ser así realiza una captura del comando ~git status~.
    14. Resuelve el conflicto incorporando los dos nombres de actrices.
    15. Haz una captura de pantalla del resultado del comando ~git log --graph --all~. Observa que se ha creado un nuevo /commit/ que integra los dos caminos anteriores.
    16. Comprime la carpeta ~S2R1~ y envíala junto con las capturas de pantalla según el procedimiento indicado en el apartado siguiente.
 2) Crea una carpeta denominada ~S2R2-remoto~. Inicializa un repositorio Git en su interior mediante el comando ~git init --bare~. Esta carpeta se utilizará como repositorio remoto.
 3) Clona el repositorio ~S2R2-remoto~ en una carpeta denominada ~S2R2~. Adjunta captura de pantalla del resultado del comando de clonado. A continuación realiza las siguientes acciones en el repositorio ~S2R2~:
    1. Crea un archivo denominado ~directores.txt~. Añade el nombre de tres directores de cine.
    2. Haz un /commit/.
    3. Realiza un /push/ al repositorio remoto. Adjunta captura de pantalla del resultado.
    4. Crea una rama denominada /version1/.
    5. En la rama /version1/ añade el nombre de dos directores de cine más al archivo ~directores.txt~.
    6. Realiza un /push/ de la rama al repositorio remoto de manera que quede asociada a la rama remota del mismo nombre. Adjunta captura de pantalla del resultado.
 4) Clona el repositorio ~S2R2-remoto~ en una segunda carpeta denominada ~S2R3~. Realiza las siguientes acciones sobre ella:
    1. Muestra en la consola el contenido del fichero ~directores.txt~ y el resultado del comando ~git status~.
    2. Cambia a la rama /version1/. Muestra el resultado del comando.
    3. Muestra el contenido del fichero ~directores.txt~ por la pantalla. Comprueba que se muestran los 5 nombres de directores esperados. Adjunta captura de pantalla.
    4. Incorpora los cambios de la rama /version1/ a la rama /master/.
    5. Sube la rama /master/ actualizada al servidor. Adjunta captura de pantalla del resultado del comando.
 5) Vuelve de nuevo a la carpeta ~S2R2~ y realiza las siguientes acciones:
    1. Obtén los cambios que hay en el repositorio remoto. Adjunta captura de pantalla del resultado del comando utilizado.
    2. Actualiza la rama /master/ local con el contenido de la rama /master/ del repositorio remoto. Adjunta captura de pantalla del resultado del comando utilizado.
    3. Comprueba que deben aparecer los 5 nombres de directores esperados.
 6) Por último, selecciona las carpetas ~S2R2-remoto~, ~S2R2~ y ~S3R3~ y adjúntalas según el procedimiento indicado en el apartado siguiente.

*** Entrega de la tarea
  Crea un fichero ~.zip~ con los resultados que se piden en cada una de las tareas y nómbralo según el patrón ~APELLIDOS_NOMBRE_sesion2.zip~. La entrega del fichero se realizará a través de la plataforma de educación a distancia https://aules.edu.gva.es.

* GitHub
** Tareas
*** 1 - Creación de cuenta en GitHub
 1) Crea una cuenta en GitHub
 2) Añade tu dirección de correo de educación
 3) Solicita un descuento para uso educativo

*** 2 - Trabajo con repositorios, issues, forks y pull requests
 1) Haz un /fork/ del repositorio localizado en la siguiente url: https://github.com/interfacesweb-19-20/semana1-github
    1) Realiza un primer commit para poner tu nombre y apellidos en el fichero ~README.md~
    2) Crea 3 issues con los siguientes títulos:
       - Añadir 3 libros
       - Añadir 3 películas
       - Añadir 3 discos
    3) Crea una ~milestone~ denominada ~Tareas~ que contenga los 3 issues creados.
    4) Modifica los ficheros correspondientes y realiza 3 commits para realizar cada una de las tareas que se indican en los issues. El mensaje del commit debe hacer que se cierren los issues correspondientes de manera automática.
    5) Haz una captura de pantalla de los comandos que has utilizado para hacer los commits y subir los cambios a GitHub.
    6) Incluye las capturas de pantalla en el repositorio dentro de la carpeta ~capturas~. Añádelas también al repositorio de manera que queden guardadas en tu repositorio en GitHub.
    7) Realiza una ~pull request~ indicando en el mensaje que has completado la tarea.

** Entrega de la tarea
La entrega de la tarea se realiza a través de GitHub
